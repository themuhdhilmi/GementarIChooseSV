# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code,
# run Prisma migrate, and then build the Next.js app.
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  DATABASE_URL: 'mysql://root:password@127.0.0.1:3306/ichoosesv'
  NEXTAUTH_SECRET: RBs1Ool8Y8d0Y0WTurjvcykIZxZnuq7qTeMpORaRyWiLlReMoVeSoOn
  NEXTAUTH_URL: localhost

jobs:
  build:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: ichoosesv
          DATABASE_URL: 'mysql://root:password@127.0.0.1:3306/ichoosesv'
        ports:
            - '3306:3306'
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    strategy:
      matrix:
        node-version: [20.x]  # Adjust the Node.js version as needed

    steps:
    - uses: actions/checkout@v3
    - run: mysql -h 127.0.0.1 --port 3306 -u root -ppassword -e 'CREATE DATABASE IF NOT EXISTS ichoosesv;'

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install Dependencies
      run: npm install

    - name: Run Prisma Migrate
      run: npx prisma migrate deploy

    - name: Build Next.js App
      run: npm run build

    - name: Build the Docker image
      run: docker build . --file Dockerfile --tag my-image-name:$(date +%s) --network="host"

